import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import inlineWorkerPlugin from "esbuild-plugin-inline-worker";
import path from "path";
import {
	copyFileSync,
	readdirSync,
	writeFileSync,
	readFileSync,
	mkdirSync,
	appendFileSync,
} from "fs";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "build/main.js",
	minify: prod,
	plugins: [
		inlineWorkerPlugin({
			workerName: "Datacore Transform Worker",
			sourcemap: prod ? false : "inline",
			external: [...builtins],
		}),
		{
			name: "watcher",
			setup(build) {
				build.onEnd((res) => {
					for (let f of ["manifest.json"]) copyFileSync(f, `./build/${f}`);
					if (!prod && process.env.TEST_VAULT) {
						const base = path.resolve(
							`${process.env.TEST_VAULT}/.obsidian/plugins/datacore-addon-transform-imports`
						);
						try {
							mkdirSync(base);
						} catch (_e) {}
						appendFileSync("build/main.js", "\n/* nosourcemap */");
						for (let f of readdirSync("./build")) {
							console.log(f);
							writeFileSync(
								path.resolve(base, f),
								readFileSync(path.resolve("build", f))
							);
						}
					}
				});
			},
		},
	],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
